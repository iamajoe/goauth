// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package dbgen

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO app_auth_users (id, email, phone_number, meta, password, is_verified)
VALUES (?, ?, ?, ?, ?, ?)
ON CONFLICT(email) DO UPDATE SET
    phone_number = excluded.phone_number,
    meta = excluded.meta,
    password = excluded.password,
    is_verified = excluded.is_verified
`

type CreateUserParams struct {
	ID          string
	Email       string
	PhoneNumber sql.NullString
	Meta        interface{}
	Password    string
	IsVerified  sql.NullBool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.Meta,
		arg.Password,
		arg.IsVerified,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, phone_number, password, is_verified_at, is_verified, meta, created_at, updated_at
FROM app_auth_users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (AppAuthUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i AppAuthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.IsVerifiedAt,
		&i.IsVerified,
		&i.Meta,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, phone_number, password, is_verified_at, is_verified, meta, created_at, updated_at
FROM app_auth_users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (AppAuthUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i AppAuthUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.IsVerifiedAt,
		&i.IsVerified,
		&i.Meta,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserIsVerified = `-- name: UpdateUserIsVerified :exec
UPDATE app_auth_users SET is_verified = ? AND is_verified_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateUserIsVerifiedParams struct {
	IsVerified sql.NullBool
	ID         string
}

func (q *Queries) UpdateUserIsVerified(ctx context.Context, arg UpdateUserIsVerifiedParams) error {
	_, err := q.db.ExecContext(ctx, updateUserIsVerified, arg.IsVerified, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE app_auth_users SET password = ? WHERE id = ?
`

type UpdateUserPasswordParams struct {
	Password string
	ID       string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}

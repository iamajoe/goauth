// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: token.sql

package dbgen

import (
	"context"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO app_auth_tokens (user_id, kind, value, expires_at)
VALUES (?, ?, ?, ?)
`

type CreateTokenParams struct {
	UserID    string
	Kind      int64
	Value     string
	ExpiresAt string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.UserID,
		arg.Kind,
		arg.Value,
		arg.ExpiresAt,
	)
	return err
}

const isTokenRegistered = `-- name: IsTokenRegistered :one
SELECT EXISTS(SELECT 1 FROM app_auth_tokens WHERE value = ? LIMIT 1)
`

func (q *Queries) IsTokenRegistered(ctx context.Context, value string) (int64, error) {
	row := q.db.QueryRowContext(ctx, isTokenRegistered, value)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const removeUserToken = `-- name: RemoveUserToken :exec
DELETE FROM app_auth_tokens WHERE user_id = ? AND value = ?
`

type RemoveUserTokenParams struct {
	UserID string
	Value  string
}

func (q *Queries) RemoveUserToken(ctx context.Context, arg RemoveUserTokenParams) error {
	_, err := q.db.ExecContext(ctx, removeUserToken, arg.UserID, arg.Value)
	return err
}

const removeUserTokens = `-- name: RemoveUserTokens :exec
DELETE FROM app_auth_tokens WHERE user_id = ?
`

func (q *Queries) RemoveUserTokens(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, removeUserTokens, userID)
	return err
}
